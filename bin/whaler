#!/usr/bin/env node

'use strict';

process.bin = process.title = 'whaler';

const Whaler = require('../index');

const whaler = new Whaler();

const argv = process.argv.slice(2);
let index = argv.indexOf('-H');
if (-1 === index) {
    index = argv.indexOf('--host');
}

whaler.on('deprecate', async ctx => {
    if ('ON' != process.env.WHALER_NO_DEPRECATION) {
        const { message } = ctx.options;
        process.stderr.write('\n' + message + '\n');
    }
});

whaler.on('console', async ctx => {
    const { type, message, args } = ctx.options;
    console[type]('\n%s[%s] ' + message, ' '.repeat(argv.length ? 0 : 2), process.pid, ...args);
});

if (-1 !== index && argv[index + 1]) {

    const args = argv.splice(index, 2);
    whaler.fetch('client').then(({ default: client }) => {
        client(args[1], argv);
    }).catch(err => {
        whaler.error('%s\n', err.message);
    });

} else {

    const progress = require('../src/progress');
    progress.active = true;
    progress.run = () => {
        if (!argv.length) {
            console.log('');
            console.log(require('../src/header'));
            console.log('');
            progress.start(2);
        } else {
            progress.start();
        }
    };
    progress.done = () => {
        progress.active = false;
        progress.stop();
    };

    whaler.before('deprecate', async ctx => 'ON' != process.env.WHALER_NO_DEPRECATION && progress.active && progress.stop());
    whaler.after('deprecate', async ctx => 'ON' != process.env.WHALER_NO_DEPRECATION && progress.active && progress.start());

    whaler.before('console', async ctx => progress.active && progress.stop());
    whaler.after('console', async ctx => progress.active && progress.start());

    void async function main () {
        progress.run();

        await whaler.init();

        const [ cli, modules , plugins ] = await Promise.all([
            whaler.fetch('cli').then(({ default: cli }) => cli),
            whaler.fetch('modules').then(({ default: modules }) => modules),
            whaler.fetch('plugins').then(({ default: plugins }) => plugins)
        ]);

        // TODO: remove in v1
        cli.deprecate = message => whaler.deprecate(message);

        for (let name of await modules.list()) {
            const { default: module } = await modules.import(name);
            await module(whaler);
            if (module['__cmd']) {
                await module['__cmd'](whaler);
            }
        }

        for (let name of await plugins.list()) {
            try {
                const { default: plugin } = await plugins.import(name);
                await plugin(whaler);
                if (plugin['__cmd']) {
                    await plugin['__cmd'](whaler);
                }
            } catch (e) {
                whaler.error('%s: %s', name, e.message);
            }
        }

        return cli;
    }().then(cli => {
        progress.done();
        if (!argv.length) {
            cli.help();
        } else {
            cli.parse(process.argv);
        }
    }).catch(err => {
        progress.done();
        whaler.error('%s\n', err.message);
    });

}
